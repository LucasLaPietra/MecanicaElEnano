// <auto-generated />
using System;
using BackendMecanicaElEnano;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BackendMecanicaElEnano.Migrations
{
    [DbContext(typeof(MecanicaContext))]
    [Migration("20221011224915_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BackendMecanicaElEnano.Models.Presupuesto", b =>
                {
                    b.Property<Guid>("IdPresupuesto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<int>("Km")
                        .HasColumnType("int");

                    b.Property<string>("TrabajoARealizar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ValidoHasta")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("VehiculoIdVehiculo")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdPresupuesto");

                    b.HasIndex("VehiculoIdVehiculo");

                    b.ToTable("presupuesto");
                });

            modelBuilder.Entity("BackendMecanicaElEnano.Models.Repuesto", b =>
                {
                    b.Property<Guid>("IdRepuesto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PresupuestoIdPresupuesto")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.Property<float>("precio")
                        .HasColumnType("real");

                    b.HasKey("IdRepuesto");

                    b.HasIndex("PresupuestoIdPresupuesto");

                    b.ToTable("repuesto");
                });

            modelBuilder.Entity("BackendMecanicaElEnano.Models.RepuestoTrabajo", b =>
                {
                    b.Property<Guid>("IdRepuestoTrabajo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PresupuestoIdPresupuesto")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.Property<Guid?>("TrabajoIdPresupuesto")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("precio")
                        .HasColumnType("real");

                    b.HasKey("IdRepuestoTrabajo");

                    b.HasIndex("PresupuestoIdPresupuesto");

                    b.HasIndex("TrabajoIdPresupuesto");

                    b.ToTable("repuestoTrabajo");
                });

            modelBuilder.Entity("BackendMecanicaElEnano.Models.Trabajo", b =>
                {
                    b.Property<Guid>("IdPresupuesto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<int>("Km")
                        .HasColumnType("int");

                    b.Property<string>("TrabajosPendientes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrabajosRealizados")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("VehiculoIdVehiculo")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdPresupuesto");

                    b.HasIndex("VehiculoIdVehiculo");

                    b.ToTable("trabajo");
                });

            modelBuilder.Entity("BackendMecanicaElEnano.Models.Vehiculo", b =>
                {
                    b.Property<Guid>("IdVehiculo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Cliente")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cuit")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Modelo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumeroChasis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patente")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdVehiculo");

                    b.ToTable("vehiculo");
                });

            modelBuilder.Entity("BackendMecanicaElEnano.Models.Presupuesto", b =>
                {
                    b.HasOne("BackendMecanicaElEnano.Models.Vehiculo", "Vehiculo")
                        .WithMany("Presupuestos")
                        .HasForeignKey("VehiculoIdVehiculo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehiculo");
                });

            modelBuilder.Entity("BackendMecanicaElEnano.Models.Repuesto", b =>
                {
                    b.HasOne("BackendMecanicaElEnano.Models.Presupuesto", "Presupuesto")
                        .WithMany("Repuestos")
                        .HasForeignKey("PresupuestoIdPresupuesto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Presupuesto");
                });

            modelBuilder.Entity("BackendMecanicaElEnano.Models.RepuestoTrabajo", b =>
                {
                    b.HasOne("BackendMecanicaElEnano.Models.Presupuesto", "Presupuesto")
                        .WithMany()
                        .HasForeignKey("PresupuestoIdPresupuesto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackendMecanicaElEnano.Models.Trabajo", null)
                        .WithMany("Repuestos")
                        .HasForeignKey("TrabajoIdPresupuesto");

                    b.Navigation("Presupuesto");
                });

            modelBuilder.Entity("BackendMecanicaElEnano.Models.Trabajo", b =>
                {
                    b.HasOne("BackendMecanicaElEnano.Models.Vehiculo", "Vehiculo")
                        .WithMany()
                        .HasForeignKey("VehiculoIdVehiculo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehiculo");
                });

            modelBuilder.Entity("BackendMecanicaElEnano.Models.Presupuesto", b =>
                {
                    b.Navigation("Repuestos");
                });

            modelBuilder.Entity("BackendMecanicaElEnano.Models.Trabajo", b =>
                {
                    b.Navigation("Repuestos");
                });

            modelBuilder.Entity("BackendMecanicaElEnano.Models.Vehiculo", b =>
                {
                    b.Navigation("Presupuestos");
                });
#pragma warning restore 612, 618
        }
    }
}
